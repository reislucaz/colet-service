generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  passwordHash  String  @map("password_hash")

  products Product[]

  messagesSent Message[] @relation(name: "from_user")
  messagesReceived   Message[] @relation(name: "to_user")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Category {
  id        String   @id @default(cuid())

  name      String
  description String

  products Product[]

  image     Image? @relation(fields: [imageId], references: [id])

  imageId   String? @map("image_id") @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Product {
  id        String   @id @default(cuid())
  
  name      String

  description String

  price     Float?

  recurring Boolean @default(false)

  categories Category[]

  authorId  String @map("author_id")

  author    User @relation(fields: [authorId], references: [id])

  images    Image[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Image {
  id        String   @id @default(cuid())

  key      String

  productId String @map("product_id")

  product   Product @relation(fields: [productId], references: [id])

  category Category?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Message {
  id        String   @id @default(cuid())

  text      String

  fromUser  User @relation(name: "from_user", fields: [fromUserId], references: [id])

  fromUserId String @map("from_user_id")

  toUser    User @relation(name: "to_user", fields: [toUserId], references: [id])

  toUserId  String @map("to_user_id")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}