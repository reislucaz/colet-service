generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../ERD.png"
}

model User {
  id           String @id @default(cuid())
  name         String
  email        String @unique
  passwordHash String @map("password_hash")

  messagesSent     Message[] @relation(name: "from_user")
  messagesReceived Message[] @relation(name: "to_user")

  chats          Chat[]    @relation("user_chats")
  offers         Offer[]   @relation("user_offers")
  receivedOffers Offer[]   @relation("recipient_offers")
  products       Product[]

  stripeCustomerId String? @map("stripe_customer_id")

  orderSeller Order[] @relation("order_seller")
  orderPurchaser Order[] @relation("order_purchaser")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

}

model Category {
  id String @id @default(cuid())

  name String

  description String

  products Product[]

  iconKey String @map("icon_key")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Product {
  id String @id @default(cuid())

  name String

  description String

  price Float?

  recurring Boolean @default(false)

  category Category @relation(fields: [categoryId], references: [id])

  categoryId String @map("category_id")

  images Image[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  neighborhood String
  city         String
  state        String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Chat      Chat[]
  offers    Offer[]

  order Order[] @relation("order_product")
}

model Image {
  id String @id @default(cuid())

  key String

  productId String @map("product_id")

  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Message {
  id String @id @default(cuid())

  text String

  fromUser   User   @relation(name: "from_user", fields: [fromUserId], references: [id])
  fromUserId String @map("from_user_id")

  toUser   User   @relation(name: "to_user", fields: [toUserId], references: [id])
  toUserId String @map("to_user_id")

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @map("chat_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Chat {
  id String @id @default(cuid())

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  participants User[] @relation("user_chats")

  messages Message[]

  offers Offer[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Offer {
  id String @id @default(cuid())

  amount Float

  status OfferStatus @default(PENDING)

  sender   User   @relation("user_offers", fields: [senderId], references: [id])
  senderId String @map("sender_id")

  recipient   User   @relation("recipient_offers", fields: [recipientId], references: [id])
  recipientId String @map("recipient_id")

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String @map("chat_id")

  product  Product @relation(fields: [productId], references: [id])
  productId String @map("product_id")

  stripePaymentIntentId String? @map("stripe_payment_intent_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order Order[] @relation("order_offer")
}

model Order {
  id String @id @default(cuid())

  status OrderStatus @default(PENDING)
  amount Float

  seller   User   @relation("order_seller", fields: [sellerId], references: [id])
  sellerId String @map("seller_id")

  purchaser   User   @relation("order_purchaser", fields: [purchaserId], references: [id])
  purchaserId String @map("purchaser_id")

  product  Product @relation("order_product", fields: [productId], references: [id])
  productId String @map("product_id")

  Offer Offer? @relation("order_offer", fields: [offerId], references: [id])
  offerId String? @map("offer_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  DECLINED
  PAID
  CANCELLED
}
